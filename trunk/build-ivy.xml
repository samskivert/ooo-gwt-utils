<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="gwt-utils" default="compile" basedir=".">
  <!-- things you may want to change -->
  <property name="lib.name"         value="gwt-utils"/>
  <property name="doc.packages"     value="com.threerings.*"/>
  <property name="copyright.holder" value="Three Rings Design, Inc."/>

  <!-- the next release version -->
  <property name="revision" value="1.0"/>

  <!-- things you probably don't want to change -->
  <property name="src.dir"     value="src/main/java"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>
  <property name="javadoc.dir" value="${deploy.dir}/docs"/>

  <!-- downloads ivy if necessary and sets everything up -->
  <property name="ivy.vers" value="2.1.0-rc2" />
  <property name="ivy.jar.dir" value="${user.home}/.ant/lib" />
  <condition property="ivy.exists"><available file="${ivy.jar.dir}/ivy.jar"/></condition>
  <target name="-download-ivy" unless="ivy.exists">
    <mkdir dir="${ivy.jar.dir}"/>
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.vers}/ivy-${ivy.vers}.jar" 
         dest="${ivy.jar.dir}/ivy.jar" usetimestamp="true"/>
  </target>
  <target name="-init-ivy" depends="-download-ivy">
    <path id="ivy.lib.path"><fileset dir="${ivy.jar.dir}" includes="*.jar"/></path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:cachepath pathid="compile.classpath" conf="compile" log="download-only"/>
    <ivy:cachepath pathid="test.classpath" conf="test" log="download-only"/>
  </target>

  <target name="-prepare" depends="-init-ivy">
    <tstamp><format property="year" pattern="yyyy" /></tstamp>
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/jar"/>
    <mkdir dir="${deploy.dir}/source"/>
    <mkdir dir="${deploy.dir}/javadoc"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
  </target>

  <target name="clean" description="Cleans out most build results.">
    <delete dir="${classes.dir}"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <target name="distclean" description="Completely cleans out build results.">
    <delete dir="${deploy.dir}"/>
    <delete><fileset dir="${src.dir}" includes="**/*Messages.java"/></delete>
  </target>

  <target name="gmsgs" description="Regenerates our i18n message classes.">
    <javac srcdir="${src.dir}" destdir="${deploy.dir}/classes" includeAntRuntime="false"
           debug="on" deprecation="on">
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
      <include name="**/I18nSyncTask.java"/>
    </javac>
    <taskdef name="i18nsync" classname="com.threerings.gwt.tools.I18nSyncTask">
      <classpath>
        <path refid="compile.classpath"/>
        <pathelement location="${deploy.dir}/classes"/>
      </classpath>
    </taskdef>
    <i18nsync srcdir="${src.dir}">
      <fileset dir="${src.dir}" includes="**/*Messages.properties"/>
    </i18nsync>
  </target>

  <target name="compile" depends="-prepare,gmsgs" description="Compiles main classes.">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" encoding="utf-8">
      <classpath refid="compile.classpath"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="javadoc" depends="-prepare" description="Builds javadocs.">
    <javadoc windowtitle="${lib.name} API" doctitle="${lib.name} API"
             destdir="${javadoc.dir}" additionalparam="-breakiterator">
      <classpath refid="compile.classpath"/>
      <packageset dir="${src.dir}"/>
      <bottom>Copyright &#169; 2009-${year} ${copyright.holder}. All Rights Reserved.</bottom>
      <link href="http://samskivert.com/code/samskivert/docs"/>
      <link href="http://java.sun.com/javase/6/docs/api/"/>
    </javadoc>
    <jar destfile="${deploy.dir}/javadoc/${lib.name}.jar" basedir="${javadoc.dir}"/>
  </target>

  <target name="all" depends="clean,compile,javadoc,dist" description="Rebuilds everything."/>

  <target name="dist" depends="compile" description="Builds jar files.">
    <jar destfile="${deploy.dir}/jar/${lib.name}.jar">
      <fileset dir="${deploy.dir}/classes" includes="**"/>
      <fileset dir="${src.dir}">
        <include name="com/threerings/gwt/**"/>
        <exclude name="com/threerings/gwt/rebind/**"/>
        <exclude name="com/threerings/gwt/tools/**"/>
        <!-- include our sneaky duplicates of Google Collections stuff -->
        <include name="javax/**"/>
        <include name="com/google/**"/>
      </fileset>
    </jar>
    <jar destfile="${deploy.dir}/source/${lib.name}.jar" basedir="${src.dir}"/>
  </target>

  <target name="gen-pom" depends="-prepare" description="Generates a POM file.">
    <ivy:makepom ivyfile="ivy.xml" pomfile="${deploy.dir}/${lib.name}.pom">
      <!-- this is kind of a hack, but we use 'compile' to indicate dependencies that -->
      <!-- will be "provided" and "runtime" to indicate our transitive dependencies -->
      <mapping conf="compile" scope="provided"/>
      <mapping conf="runtime" scope="compile"/>
      <mapping conf="test" scope="test"/>
    </ivy:makepom>
  </target>

  <target name="publish" depends="dist,javadoc" description="Publishes jar to local repository.">
    <ivy:publish resolver="local" pubrevision="${revision}" forcedeliver="true">
      <artifacts pattern="${deploy.dir}/[type]/[artifact].[ext]"/>
    </ivy:publish>
  </target>

  <target name="publish-remote" depends="publish" description="Publishes a public release.">
    <exec executable="svn">
      <arg value="checkout"/>
      <arg value="-N"/>
      <arg value="https://ooo-gwt-utils.googlecode.com/svn/releases/com.threerings/${lib.name}"/>
      <arg value="temp"/>
    </exec>
    <mkdir dir="temp/${revision}"/>
    <copy todir="temp/${revision}">
      <fileset dir="${user.home}/.ivy2/local/com.threerings/${lib.name}/${revision}">
        <include name="ivys/ivy.jar"/>
        <include name="jars/${lib.name}.jar"/>
        <include name="sources/${lib.name}.jar"/>
        <include name="javadocs/${lib.name}.jar"/>
      </fileset>
    </copy>
    <exec executable="svn">
      <arg value="add"/>
      <arg value="temp/${revision}"/>
    </exec>
    <exec executable="svn">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="Published release ${revision}."/>
      <arg value="temp"/>
    </exec>
    <delete dir="temp"/>
  </target>
</project>
