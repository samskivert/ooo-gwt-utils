//
// $Id$

package com.threerings.gwt.tools;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.DirectoryScanner;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.types.FileSet;

/**
 * An Ant task to automatically generate <code>FooMessages.java</code> classes from
 * <code>FooMessages.properties</code> classes for GWT's i18n. Configure the Ant task thusly:
 * <pre>{@code
 * <taskdef name="i18nsync" classname="com.threerings.gwt.tools.I18nSyncTask" classpathref="cp"/>
 * <i18nsync srcdir="${src.dir}">}
 *   &lt;fileset dir="${src.dir}" includes="**&#47;*Messages.properties"/&gt;
 * {@code <i18nsync>}</pre>
 * The classpath referenced as <code>cp</code> must reference a classpath that contains both
 * <code>gwt-utils.jar</code> and <code>gwt-user.jar</code>.
 */
public class I18nSyncTask extends Task
{
    public void addFileset (FileSet set)
    {
        _filesets.add(set);
    }

    public void setSrcdir (File srcdir)
    {
        _sourcePath = srcdir.getAbsolutePath();
    }

    @Override
    public void execute () throws BuildException
    {
        if (_sourcePath == null) {
            throw new BuildException("Missing required attribute 'srcdir'");
        }

        for (FileSet fs : _filesets) {
            DirectoryScanner ds = fs.getDirectoryScanner(getProject());
            File fromDir = fs.getDir(getProject());
            for (String srcFile : ds.getIncludedFiles()) {
                try {
                    processFile(new File(fromDir, srcFile));
                } catch (IOException ioe) {
                    throw new BuildException("Failure converting " + srcFile, ioe);
                }
            }
        }
    }

    protected void processFile (File propsFile)
        throws IOException
    {
        if (!propsFile.getName().endsWith(".properties")) {
            System.err.println("Ignoring non-properties file: " + propsFile);
            return;
        }

        String root = propsFile.getName();
        if (root.endsWith(".properties")) {
            root = root.substring(0, root.length()-".properties".length());
        }
        File javaFile = new File(propsFile.getParent(), root + ".java");
        if (propsFile.lastModified() <= javaFile.lastModified()) {
            return;
        }

        String javaPath = javaFile.getAbsolutePath();
        if (!javaPath.startsWith(_sourcePath)) {
            System.err.println("Ignoring properties file outside 'srcdir': " + propsFile);
            return;
        }

        String pkg = javaPath.substring(_sourcePath.length());
        if (pkg.startsWith(File.separator)) {
            pkg = pkg.substring(1);
        }
        pkg = pkg.substring(0, pkg.indexOf(javaFile.getName()));
        if (pkg.endsWith(File.separator)) {
            pkg = pkg.substring(0, pkg.length()-1);
        }
        pkg = pkg.replace(File.separatorChar, '.');

        String clazz = javaFile.getName().substring(0, javaFile.getName().indexOf(".java"));

        System.out.println("Generating " + pkg + "." + clazz + "...");

        StringBuilder buf = new StringBuilder();
        buf.append("//\n");
        buf.append("// Generated by I18nSyncTask on ").append(new Date()).append("\n\n");
        buf.append("package ").append(pkg).append(";\n\n");
        buf.append("public interface ").append(clazz);
        buf.append(" extends com.google.gwt.i18n.client.Messages\n");
        buf.append("{\n");

        Properties props = new Properties();
        props.load(new FileInputStream(propsFile));
        Enumeration<?> names = props.propertyNames();
        for (int method = 0; names.hasMoreElements(); method++) {
            if (method > 0) {
                buf.append("\n");
            }
            String key = String.valueOf(names.nextElement());
            buf.append("    @Key(\"").append(key).append("\")\n");
            buf.append("    String ").append(keyToMethod(key)).append(" (");
            String value = props.getProperty(key);
            int idx = 0;
            while (value.indexOf("{" + idx) != -1) {
                if (idx > 0) {
                    buf.append(", ");
                }
                // TODO: make {N:integer} into an int argument, {N:percent} into a float, etc.
                buf.append("String arg").append(idx);
                idx++;
            }
            buf.append(");\n");
        }
        buf.append("}\n");

        PrintWriter out = new PrintWriter(javaFile, "UTF-8");
        out.print(buf.toString());
        out.close();
    }

    protected static String keyToMethod (String key)
    {
        return key.replace('.', '_');
    }

    /** The absolute path to the root of our source tree. */
    protected String _sourcePath;

    /** A list of filesets that contain tile images. */
    protected List<FileSet> _filesets = new ArrayList<FileSet>();
}
